p {
    color:white;
    background-color:gray;
    font-size:50%
     font-family: Aerial;
}
h1 { color: orange; }
h2, h3{
    color: pink; 
    background-color:black;
}
#intro .first em {
    color: pink; 
    background-color:gray;
}
/*this is a comment.The cascade is based on below priority: 
1) User styles
2) Website author styles
3) Browser's default styles

I mean the highest priority is the the user's style. A user can use his own styles by going to settings of the browser and attaching to it his/her own CSS rules which are places in a file,
If there is no user style, the website owner's style will be used.
If there are no any of the above, browser will use it's own way of default styling.*/
p.serif {
    font-family: "Times New Roman", Times, serif;
}
p.sansserif {
    font-family: Helvetica, Arial, sans-serif;
}
p.monospace {
    font-family: "Courier New", Courier, monospace;
}
p.cursive {
    font-family: Florence, cursive;
}
p.fantasy {
    font-family: Blippo, fantasy;
}
/*There are two types of font family names: 
- font family: a specific font family (like Times New Roman or Arial)
- generic family: a group of font families with a similar look (like Serif or Monospace)
Separate each value with a comma to indicate that they are alternatives. 
If the name of a font family is more than one word, it must be in quotation marks: "Times New Roman".
Should I define that time new roman is part of serif or times ... I can't understand !!!!

I get it ‚úãüòÉ 
If times new roman not available in browser it will pick times if also not available it will pick similar from generic family which is serif üòä
*/
p.small {
    font-size: small;
}
p.medium {
    font-size: medium;
}
p.large {
    font-size: large;
}
p.xlarge {
    font-size: x-large;
}
p.italic {
    font-style: italic;
}
p.oblique{
    font-style:oblique;
}
p.light {   
    font-weight: lighter;
}
p.bold {   
    font-weight: bold;
}
p.bolder {
    font-weight: bolder;
}
/*in addition using them,we can use font-weight:100 to 900, font-weight:400; equal to normal fon weight, font-wight:700; equal to bold...*/
p.normal {
    font-variant: normal;
}
p.small {
    font-variant: small-caps;
}
/*Not every font supports CSS font-variant, so be sure to test before you publish.*/
p.example {
    color: green;
}
/*there are 140 supported names for color! http://www.w3schools.com/colors/colors_hex.asp
Another way of defining colors is using hexadecimal values and RGB. 
Hexadecimal form is a pound sign (#) followed by at most, 6 hex values (0-F).
RGB defines the individual values for Red, Green, and Blue.
*/
h5 {
    color: #0000FF;
}
p.example0 {
    color: rgb(255,0,0);
}

/*RGBA(a,b,c,d) it means
a=value of red(0-255)
b=value of green(0-255)
c=value of blue(0-255)
d=value of opacity(0-1)
we have one more option besides these rgb, rgba which are hsl and hsla.
hsl - Hue, Saturation, Lighness
hsla - Hue, Saturation, Lightness, alpha(opecity)
--------
>Hue is the degree on the color between 0-360.
I.e. - 0 and 360 is for red
      - 120 is green
      - 280 is purple 
>Saturation is colour % value (0-100)%
>Lightness is also a % value to make the color lighter and darker. where 0% - black and 100% - white.
> opecity we use to make the text color transparent. the value can be between 0.0 to 1.0 where 0.0 is fully transparent and 1.0 is fully opaque.

for example
hsl (120, 100%, 75%) - light green
hsla (120, 100%, 75%, 0.5) - light green with half transparency.

Test this guys..
Thanks guys, I hope it is helpful for u..
Methods change "Paraghraph" color to RED :

p { color: red; }
p { color: #f00; }
p { color: #ff0000; }
p { color: rgb(255,0,0); }
p { color: rgb(100%, 0%, 0%); }
p { color: hsl(0, 100%, 50%); }

50% translucent
p { color: rgba(255, 0, 0, 0.5); } 
p { color: hsla(0, 100%, 50%, 0.5); }
*/
p.left {
    text-align: left;
}
p.right {
    text-align: right;
}
p.center {
    text-align: center;
}
p.justify{
    text-align:justify;
}
/*When text-align is set to "justify", each line is stretched so that every line has equal width, and the left and right margins are straight (as in magazines and newspapers).*/
td.top {
    vertical-align: top;
}
td.middle {
    vertical-align: middle;
}
td.bottom {
    vertical-align: bottom;
}
span.baseline {
    vertical-align: baseline;
}
span.sub {
    vertical-align: sub;
}
span.super {
    vertical-align: super;
}
span.pixel {
    vertical-align: -10px;
}
/*Instead of px values, you can use pt (points), cm (centimeters) and % (percentage) values.*/
.main {
    height: 150px; width: 400px;
    background-color: LightSkyBlue;
    display: inline-table;
}
.paragraph {
    display: table-cell;
    vertical-align: middle;
}
p.none {
    text-decoration: none;
}
p.inherit {
    text-decoration: inherit;
}
p.overline {
    text-decoration: overline;
}
p.underline {
    text-decoration: underline;
}
p.line-through {
    text-decoration: line-through;
}
p.blink {
    text-decoration: blink;
}
/*blink is ignored by most browsers
The text-indent property specifies how much horizontal space should be left before the beginning of the first line of the text. Property values are length (px, pt, cm, em, etc.), %, and inherit.
Negative values are allowed. The first line will be indented to the left if the value is negative.
*/
p.indentation {
    text-indent: 60px;
}
/*You should use "percentage (%)" instead of pixel..b'cause it will auto adjust the paragraph-space according to users screen..
The text-shadow property adds shadow to text. 
It takes four values: the first value defines the distance of the shadow in the x (horizontal) direction, the second value sets the distance in the y (vertical) direction, the third value defines the blur of the shadow, and the fourth value sets the color.

*/
h6 {
    color: blue;
    font-size: 30pt;
    text-shadow: 5px 2px 4px grey;
}
h6.shadow {
    color: black;
    font-size: 30pt;
    text-shadow: 5px 2px 4px red, 3px 3px 4px orange, 1px 4px 4px yellow, -1px 4px 4px green, -3px 3px 4px #00FFFF, -5px 2px 4px purple;
}
p.capitalize {
    text-transform: capitalize;
}
/*it's good to use text- transform: uppercase ,lowercase,capitalize;*/
p.positive { 
    letter-spacing: 4px;
}
/*p.normal { 
    word-spacing: normal;
}
p.px { 
    word-spacing: 30px;
}
To define an extra space between words, you can use positive measurement values like px, pt, pc, cm, mm, inches, em, and ex.
The nowrap value makes the text continue on the same line until a <br> tag is encountered, and also collapses all sequences of whitespace into a single whitespace.
*/
p.nowrap {
    white-space: nowrap;
}
/*I‚Äôm trying to be explain it for myself and if it‚Äôs right even you can use it to understand! 

‚ñ™Ô∏ènowrap = ‚ÄúNowrap‚Äù neglects white-spaces & line-breaks but will EXTEND BEYOND BROWSER, so the browser will create a slider to slide across the screen to see it! 

‚ñ™Ô∏èpre-warp = ‚ÄúPre-Warp‚Äù prints exactly what we type without any changes in spaces or line breaks but BROWSER will render & fit it inside the screen,

‚ñ™Ô∏èpre = ‚ÄúPre‚Äù is very similar to ‚ÄúPre-Warp‚Äù But the only difference is Pre will EXTEND BEYOND SCREEN and same as nowrap a slider is created to slide across the screen! 

‚ñ™Ô∏èpre-line = ‚ÄúPre-Line‚Äù neglects white spaces but it PRINTS LINE-BREAK (without <br /> element)! ,

If I‚Äôm wrong just let me know‚úåüèª
A little more Explaination about box model
Content - The content of the box, where text and images appear
Padding - Clears an area around the content. The padding is transparent
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent.
When setting a background-color to a box, it covers the content area, as well as the padding.

*/
p.border {
    padding: 10px;    
    border: 5px solid green;
}
/*The different types of border styles are:
1. none
2. hidden
3. dotted
4. dashed
5. solid
6. double
7. groove
8. ridge
9. inset
10. outset
and we can also use inherit.
IF YOU WANT CURVED OR ROUND EDGE BORDER USE :

 border-radius

For eg

h1
{
border-radius:50%;   // it can be in px or % etc
}
You can specify seperate size, style and color for top, right, bottom and left border. probably this part comes later. :)

p {
    padding: 10px;    
    border-right: 5px solid green;
    border-left: 10px solid yellow;
    border-top: 2px solid red;
    border-bottom: 7px solid blue;
}

*/
div.a {
    border: 5px solid green;    
    width: 90px;
    height: 90px;
    background-image: url("http://www.sololearn.com/uploads/css_logo.png");
background-repeat: no-repeat;
background-attachment:;scroll;
}
/*To set the minimum and maximum height and width of an element, you can use the following properties:

min-width - the minimum width of an element
min-height - the minimum height of an element
max-width - the maximum width of an element
max-height - the maximum height of an element
To specify more than one image, just separate the URLs with commas.
The background repeat property specifies how background images are repeated. A background image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all. 

The repeat-x will repeat a background image only horizontally.
The background-attachment property sets whether a background image is fixed or scrolls with the rest of the page.
Even if an element has a scrolling mechanism, a "fixed" background doesn't move with the element.
we can even set the position of the image by using 
background-position property 
for eg:-
body{
background-image:url("css_logo.png");
background-position: right top;
}
When you set the background-attachment to scroll, the background image will scroll with the rest of the content.
To shorten the code,we can specify all background properties in single property called shorthand property.
For eg:-
body{
background: green url("css_logo.png") no-repeat right top;
}
The order is 
background-color
background-image
background-repeat
background-attachment
background-position

*/
ol.lower-alpha {
    list-style-type: lower-alpha;
}
ul.circle {
    list-style-type: circle;
}
ul.square {
    list-style-type: square;
}
/*There are also other list properties, such as:
list-style-image - specifies an image to be used as the list item marker.
list-style-position - specifies the position of the marker box (inside, outside).
outside" is the default value.
*/
ul.imagee {
    list-style-image: url("http://www.sololearn.com/images/bullet.jpg");
    list-style-position: inside;
}
/*ul {
   list-style: square outside none;
}*/
table {
    border-collapse: separate;
    border-spacing: 20px 40px;
}
/*The border-collapse property specifies whether the table borders are collapsed into a single border or separated as default. If the borders are separate, the border-spacing property can be used to change the spacing.
*/
caption {
    caption-side: top;
}
/*The empty-cells property specifies whether or not to display borders and background on empty cells in a table. 
Possible values are:
show: the borders of an empty cell are rendered
hide: the borders of an empty cell are not drawn
The table-layout specifies how the width of table columns is calculated. The possible values are:
auto - when column or cell width are not explicitly set, the column width will be in proportion to the amount of content in the cells that make up the column
fixed - when column or cell width are not explicitly set, the column width will not be affected by the amount of content in the cells that make up the column.

The table layout is set to auto by default. 

*/
table.fixed {
    border-collapse: separate;
    width: 100%;
    border: 1px solid gray;
    table-layout: fixed;
}
/*Links can be styled with any CSS property (e.g., color, font-family, background, etc.).
In addition, links can be styled differently, depending on what state they are in. The following pseudo selectors are available:
a:link - defines the style for normal unvisited links
a:visited - defines the style for visited links
a:active - a link becomes active once you click on it
a:hover - a link is hovered when the mouse is over it
When setting the style for several link states, there are some order rules:
 - a:hover MUST come after a:link and a:visited
 - a:active MUST come after a:hover

*/
a:hover {
    color: red;
}
/*By default, text links are underlined by the browser.
One of the most common uses of CSS with links is to remove the underline. In the example below, the text-decoration property is used to remove the underline.
a:link {
    text-decoration: none;
}

*/







